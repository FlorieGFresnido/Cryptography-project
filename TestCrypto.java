
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

public class TestCrypto extends javax.swing.JFrame {

    /**
     * Creates new form TestCrypto
     */
    public TestCrypto() {
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cryptography Project - AES Method");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Encode File");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 90, -1, -1));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Decode File");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 230, -1, -1));

        jButton1.setText("Choose File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, -1, -1));

        jButton2.setText("Choose File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 250, -1, -1));

        jTextField1.setEnabled(false);
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 150, -1));

        jTextField2.setEnabled(false);
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 250, 150, -1));

        jButton3.setText("Download File");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 160, -1, -1));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Output Encoded: ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, -1, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Output Decoded: ");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 280, -1, -1));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 280, -1, -1));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, -1, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images (1).jpeg"))); // NOI18N
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-130, -20, 700, 430));

        setSize(new java.awt.Dimension(543, 434));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    public String encrypted_txt;
    public String decrypted_txt;
    public JFileChooser _choose = new JFileChooser();

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        _choose.showOpenDialog(null);
        File _file = _choose.getSelectedFile();
        String _filepathname = _file.getAbsolutePath();
        StringBuilder sb_txt = new StringBuilder();
        char val_t3 = _filepathname.charAt(_filepathname.length()-1);
        char val_x2 = _filepathname.charAt(_filepathname.length()-2);
        char val_t1 = _filepathname.charAt(_filepathname.length()-3);
        char val_dot = _filepathname.charAt(_filepathname.length()-4);
        sb_txt.append(val_dot);
        sb_txt.append(val_t1);
        sb_txt.append(val_x2);
        sb_txt.append(val_t3);
        String dot_txt = sb_txt.toString();
        String accept_only = ".txt";
        if(accept_only.equals(dot_txt)){
            jTextField1.setText(_filepathname);
            File file_name = new File(_filepathname);
            FileReader fr = null;
            try {
                fr = new FileReader(file_name);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TestCrypto.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader br = new BufferedReader(fr);
            String line;
            StringBuilder sb_encrypted = new StringBuilder();
            try {
                int key = 4;
                while((line = br.readLine()) != null){
                    System.out.println(line);
                    char[] chars = line.toCharArray();
                    for(char c : chars) {
                        c += key;
                        sb_encrypted.append(c);
                        encrypted_txt = sb_encrypted.toString();
                    }
                }
                jLabel6.setText(encrypted_txt);
            } catch (IOException ex) {
                Logger.getLogger(TestCrypto.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "This is invalid! File extension must be .txt only",
                                   "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String uniqueID = UUID.randomUUID().toString();
        String home = System.getProperty("user.home");
        File _file = new File(home+"\\Downloads\\"+uniqueID+"_encoded.txt");
        boolean result;
        try {
            result = _file.createNewFile();
            if(result){
                try (FileWriter encode_write = new FileWriter(home+"\\Downloads\\"+uniqueID+"_encoded.txt")) {
                    encode_write.write(encrypted_txt);
                }
                JOptionPane.showMessageDialog(this, "File successfully download!",
                                   "Success", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("file created "+_file.getCanonicalPath());
            }else{
                System.out.println("File already exist at location: "+_file.getCanonicalPath());
            }
        } catch (IOException ex) {
            Logger.getLogger(TestCrypto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        _choose.showOpenDialog(null);
        File _file = _choose.getSelectedFile();
        String _filepathname = _file.getAbsolutePath();
        char val_t3 = _filepathname.charAt(_filepathname.length()-1);
        char val_x2 = _filepathname.charAt(_filepathname.length()-2);
        char val_t1 = _filepathname.charAt(_filepathname.length()-3);
        char val_dot = _filepathname.charAt(_filepathname.length()-4);
        StringBuilder sb_txt = new StringBuilder();
        sb_txt.append(val_dot);
        sb_txt.append(val_t1);
        sb_txt.append(val_x2);
        sb_txt.append(val_t3);
        String dot_txt = sb_txt.toString();
        String accept_only = ".txt";
        if(accept_only.equals(dot_txt)){
            jTextField2.setText(_filepathname);
            File file_name = new File(_filepathname);
            FileReader fr = null;
            try {
                fr = new FileReader(file_name);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TestCrypto.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader br = new BufferedReader(fr);
            String line;
            StringBuilder sb_encrypted = new StringBuilder();
            try {
                int key = 4;
                while((line = br.readLine()) != null){
                    System.out.println(line);
                    char[] chars = line.toCharArray();
                    for(char c : chars) {
                        c -= key;
                        sb_encrypted.append(c);
                        decrypted_txt = sb_encrypted.toString();
                    }
                }
                jLabel5.setText(decrypted_txt);
            } catch (IOException ex) {
                Logger.getLogger(TestCrypto.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "This is invalid! File extension must be .txt only"+dot_txt,
                                   "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestCrypto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
